generator client {
  provider = "prisma-client-js"
}

datasource db {
  // this gets replaced by the actual DATABASE_URL at build time
  provider = "__DB_PROVIDER__"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  NEW
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum DeliveryType {
  PICKUP
  DELIVERY
}

enum DeliveryStatus {
  ASSIGNED
  PICKED_UP
  DELIVERED
}

enum PaymentMethod {
  CARD
  CASH
}

enum UserRoleValue {
  CUSTOMER
  RESTAURANT_ADMIN
  RESTAURANT_EMPLOYEE
  DRIVER
  ADMIN
}

model User {
  id                 String             @id @default(uuid())
  email              String             @unique
  password           String
  fistName           String
  lastName           String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  deliveries         Delivery[]
  orders             Order[]
  driverId           String?
  driver             Driver?
  userRoles          UserRole[]
  addresses          Address[]
  cartItems          CartItem[]
  sessions           Session[]
  passwordReset      PasswordReset?
  ratingsGiven       RestaurantRating[]
  ratingsGivenDriver DriverRating[]
  earnings           Earning[]

  @@map("users")
}

model Driver {
  id           String         @id @default(uuid())
  isActive     Boolean        @default(true)
  vehicle      String
  licensePlate String
  radius       Float // in kilometers
  street       String
  streetNumber String
  zip          String
  city         String
  countryId    String
  country      Country        @relation(fields: [countryId], references: [code])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  ratings      DriverRating[]

  @@unique([userId])
  @@map("drivers")
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("password_resets")
}

model UserRole {
  id           String        @id @default(uuid())
  role         UserRoleValue
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantId String?
  restaurant   Restaurant?   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([userId, role, restaurantId])
  @@map("user_roles")
}

model Address {
  id           String  @id @default(uuid())
  label        String
  name         String
  message      String?
  street       String
  streetNumber String
  zip          String
  city         String
  phone        String?
  isDefault    Boolean @default(false)
  countryId    String
  country      Country @relation(fields: [countryId], references: [code])
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]
}

model OpeningTimes {
  id           String     @id @default(uuid())
  day          String
  open         String
  close        String
  validFrom    DateTime?
  validTo      DateTime?
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("opening_times")
}

model Country {
  code        String       @id
  name        String
  languages   Languages[]
  createdAt   DateTime
  updatedAt   DateTime
  drivers     Driver[]
  addresses   Address[]
  restaurants Restaurant[]

  @@map("countries")
}

model Languages {
  code      String    @id
  name      String
  countries Country[]
  createdAt DateTime
  updatedAt DateTime

  @@map("languages")
}

model Restaurant {
  id             String             @id @default(uuid())
  name           String
  description    String
  street         String
  streetNumber   String
  zip            String
  city           String
  phone          String
  email          String
  image          String
  createdAt      DateTime
  updatedAt      DateTime
  countryId      String
  country        Country            @relation(fields: [countryId], references: [code])
  mainCategoryId String
  mainCategory   Category           @relation(fields: [mainCategoryId], references: [id])
  openingTimes   OpeningTimes[]
  menuItems      MenuItem[]
  orders         Order[]
  cartItems      CartItem[]
  userRoles      UserRole[]
  ratings        RestaurantRating[]

  @@map("restaurants")
}

model RestaurantRating {
  id           String     @id @default(uuid())
  rating       Float
  userId       String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, restaurantId])
  @@map("ratings")
}

model DriverRating {
  id          String @id @default(uuid())
  rating      Float
  userId      String
  user        User   @relation(fields: [userId], references: [id])
  ratedUserId String
  ratedUser   Driver @relation(fields: [ratedUserId], references: [id], onDelete: Cascade)

  @@unique([userId, ratedUserId])
  @@map("user_ratings")
}

model Category {
  id         String       @id @default(uuid())
  name       String
  image      String
  createdAt  DateTime
  updatedAt  DateTime
  menuItems  MenuItem[]
  restaurant Restaurant[]

  @@map("categories")
}

model MenuItem {
  id            String      @id @default(uuid())
  name          String
  description   String
  price         Float
  taxPercent    Float
  image         String?
  published     Boolean
  availableFrom DateTime?
  availableTo   DateTime?
  createdAt     DateTime
  updatedAt     DateTime
  categoryId    String
  category      Category    @relation(fields: [categoryId], references: [id])
  restaurantId  String
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  cartItems     CartItem[]

  @@map("menu_items")
}

model CartItem {
  id           String     @id @default(uuid())
  userId       String
  restaurantId String
  menuItemId   String
  quantity     Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuItem     MenuItem   @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@unique([userId, menuItemId, restaurantId])
  @@map("cart_items")
}

model Order {
  id            String      @id @default(uuid())
  message       String?
  status        String
  total         Float
  deliveryFee   Float
  driverTip     Float?
  restaurantTip Float?
  projectTip    Float?
  createdAt     DateTime    @default(now())
  restaurantId  String
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])
  customerId    String
  customer      User        @relation(fields: [customerId], references: [id])
  addressId     String
  address       Address     @relation(fields: [addressId], references: [id])
  delivery      Delivery?
  orderItems    OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(uuid())
  message    String?
  quantity   Int
  price      Float
  taxPercent Float
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model Delivery {
  id                String         @id @default(uuid())
  type              DeliveryType
  status            DeliveryStatus @default(ASSIGNED)
  message           String?
  estimatedDelivery DateTime
  deliveredAt       DateTime?
  estimatedTime     Int? // in minutes
  distance          Float // in kilometers
  pickupAddress     String?
  dropAddress       String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  driverId          String?
  driver            User?          @relation(fields: [driverId], references: [id])
  order             Order          @relation(fields: [orderId], references: [id])
  orderId           String

  @@unique([orderId])
  @@map("deliveries")
}

model Earning {
  id         String   @id @default(uuid())
  userId     String
  date       DateTime
  amount     Float
  deliveries Int
  createdAt  DateTime @default(now())

  driver User @relation(fields: [userId], references: [id])

  @@map("earnings")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
