import {
  loginSchema,
  orderCreateSchema,
  registerSchema,
  restaurantCreateSchema,
} from "@/schemas";

export const endpoints = [
  // Auth endpoints
  {
    path: "/api/auth/login",
    method: "POST",
    description: "Authenticate user and generate JWT token",
    requestSchema: loginSchema.shape,
    responseSchema: {
      user: {
        id: "uuid",
        email: "user@example.com",
        name: "User Name",
        roles: ["CUSTOMER"],
        createdAt: "timestamp",
        updatedAt: "timestamp",
      },
      token: "JWT_TOKEN",
    },
    requiredFields: ["email", "password"],
    fieldDescriptions: {
      email: "User's email address",
      password: "User's password",
    },
    requiresAuth: false,
    errorCodes: {
      400: "Invalid request data",
      401: "Invalid credentials",
      500: "Internal server error",
    },
    validation: "loginSchema",
  },
  {
    path: "/api/auth/signup",
    method: "POST",
    description: "Register a new user account",
    requestSchema: registerSchema.shape,
    responseSchema: {
      id: "uuid",
      email: "user@example.com",
      name: "User Name",
      roles: ["CUSTOMER"],
      createdAt: "timestamp",
      updatedAt: "timestamp",
    },
    requiredFields: ["name", "email", "password", "confirmPassword"],
    fieldDescriptions: {
      name: "User's full name",
      email: "User's email address",
      password: "User's password (min 8 characters)",
      confirmPassword: "Confirm password (must match password)",
    },
    requiresAuth: false,
    errorCodes: {
      400: "Invalid request data",
      409: "Email already in use",
      500: "Internal server error",
    },
    validation: "signupSchema",
  },
  {
    path: "/api/auth/me",
    method: "GET",
    description: "Get current authenticated user's information",
    responseSchema: {
      id: "uuid",
      email: "user@example.com",
      name: "User Name",
      roles: ["ROLE"],
      createdAt: "timestamp",
      updatedAt: "timestamp",
    },
    requiresAuth: true,
    errorCodes: {
      401: "Not authenticated",
      500: "Internal server error",
    },
  },

  // Restaurant endpoints
  {
    path: "/api/restaurants",
    method: "GET",
    description: "Get all restaurants",
    responseSchema: [
      {
        id: "uuid",
        name: "Restaurant Name",
        description: "Restaurant description",
        address: "Restaurant address",
        phone: "Restaurant phone",
        email: "restaurant@example.com",
        image: "image_url",
        rating: 4.5,
        cuisine: "Restaurant cuisine",
        isOpen: true,
        createdAt: "timestamp",
        updatedAt: "timestamp",
      },
    ],
    requiresAuth: false,
    errorCodes: {
      500: "Internal server error",
    },
  },
  {
    path: "/api/restaurants/:id",
    method: "GET",
    description: "Get restaurant by ID",
    responseSchema: {
      id: "uuid",
      name: "Restaurant Name",
      description: "Restaurant description",
      address: "Restaurant address",
      phone: "Restaurant phone",
      email: "restaurant@example.com",
      image: "image_url",
      rating: 4.5,
      cuisine: "Restaurant cuisine",
      isOpen: true,
      menuItems: [
        {
          id: "uuid",
          name: "Menu Item Name",
          description: "Menu item description",
          price: 9.99,
          image: "image_url",
          category: "Menu item category",
          isAvailable: true,
        },
      ],
      createdAt: "timestamp",
      updatedAt: "timestamp",
    },
    requiresAuth: false,
    errorCodes: {
      404: "Restaurant not found",
      500: "Internal server error",
    },
  },
  {
    path: "/api/restaurants",
    method: "POST",
    description: "Create a new restaurant",
    requestSchema: restaurantCreateSchema.shape,
    responseSchema: {
      id: "uuid",
      name: "Restaurant Name",
      description: "Restaurant description",
      address: "Restaurant address",
      phone: "Restaurant phone",
      email: "restaurant@example.com",
      image: "image_url",
      rating: 0,
      cuisine: "Restaurant cuisine",
      isOpen: false,
      createdAt: "timestamp",
      updatedAt: "timestamp",
    },
    requiredFields: ["name", "address", "phone", "email"],
    fieldDescriptions: {
      name: "Restaurant name",
      description: "Restaurant description",
      address: "Restaurant physical address",
      phone: "Restaurant contact phone",
      email: "Restaurant contact email",
      image: "Restaurant image URL",
      cuisine: "Restaurant cuisine type",
    },
    requiresAuth: true,
    errorCodes: {
      400: "Invalid request data",
      401: "Not authenticated",
      403: "Not authorized",
      500: "Internal server error",
    },
    validation: "restaurantCreateSchema",
  },

  // Orders endpoints
  {
    path: "/api/orders",
    method: "GET",
    description: "Get all orders for the authenticated user",
    responseSchema: [
      {
        id: "uuid",
        restaurantId: "uuid",
        customerId: "uuid",
        driverId: "uuid",
        status: "PENDING",
        total: 29.99,
        deliveryFee: 4.99,
        tax: 2.5,
        address: "123 Main St",
        items: [
          {
            id: "uuid",
            menuItemId: "uuid",
            quantity: 2,
            price: 9.99,
            name: "Menu Item Name",
          },
        ],
        createdAt: "timestamp",
        deliveredAt: null,
      },
    ],
    requiresAuth: true,
    errorCodes: {
      401: "Not authenticated",
      500: "Internal server error",
    },
  },
  {
    path: "/api/orders",
    method: "POST",
    description: "Create a new order",
    requestSchema: orderCreateSchema.shape,
    responseSchema: {
      id: "uuid",
      restaurantId: "uuid",
      customerId: "uuid",
      status: "PENDING",
      total: 24.99,
      deliveryFee: 4.99,
      tax: 2.0,
      address: "123 Main St",
      items: [
        {
          id: "uuid",
          menuItemId: "uuid",
          quantity: 2,
          price: 9.99,
          name: "Menu Item Name",
        },
      ],
      createdAt: "timestamp",
      deliveredAt: null,
    },
    requiredFields: ["restaurantId", "items", "address"],
    fieldDescriptions: {
      restaurantId: "ID of the restaurant",
      items: "Array of order items (menuItemId and quantity)",
      address: "Delivery address",
    },
    requiresAuth: true,
    errorCodes: {
      400: "Invalid request data",
      401: "Not authenticated",
      404: "Restaurant or menu item not found",
      500: "Internal server error",
    },
    validation: "orderCreateSchema",
  },

  // Delivery endpoints
  {
    path: "/api/delivery/available",
    method: "GET",
    description: "Get available orders for drivers",
    responseSchema: [
      {
        id: "uuid",
        orderId: "uuid",
        status: "ASSIGNED",
        estimatedDelivery: "timestamp",
        distance: 3.5,
        pickupAddress: "Restaurant address",
        dropoffAddress: "Customer address",
        restaurantName: "Restaurant Name",
        customerName: "Customer Name",
        createdAt: "timestamp",
      },
    ],
    requiresAuth: true,
    errorCodes: {
      401: "Not authenticated",
      403: "Not authorized (not a driver)",
      500: "Internal server error",
    },
  },
  {
    path: "/api/delivery/:id/accept",
    method: "POST",
    description: "Accept a delivery as a driver",
    responseSchema: {
      id: "uuid",
      orderId: "uuid",
      status: "ASSIGNED",
      driverId: "uuid",
      estimatedDelivery: "timestamp",
      distance: 3.5,
      createdAt: "timestamp",
      updatedAt: "timestamp",
    },
    requiresAuth: true,
    errorCodes: {
      400: "Delivery already accepted",
      401: "Not authenticated",
      403: "Not authorized (not a driver)",
      404: "Delivery not found",
      500: "Internal server error",
    },
  },
];
